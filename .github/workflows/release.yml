name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v0.1.0)'
        required: true
        default: ''

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Get version from tag
      id: get_version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi
    
    - name: Generate changelog for release
      id: changelog
      run: |
        PREV_TAG=$(git describe --tags --abbrev=0 ${{ steps.get_version.outputs.version }}^ 2>/dev/null || echo "")
        if [ -z "$PREV_TAG" ]; then
          RANGE="${{ steps.get_version.outputs.version }}"
        else
          RANGE="${PREV_TAG}..${{ steps.get_version.outputs.version }}"
        fi
        
        CHANGELOG=$(git log $RANGE --pretty=format:"- %s (%h)" --reverse)
        echo "CHANGELOG<<EOF" >> $GITHUB_ENV
        echo "$CHANGELOG" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.version }}
        release_name: Release ${{ steps.get_version.outputs.version }}
        body: |
          ## Changes in this Release
          
          ${{ env.CHANGELOG }}
          
          ## Installation
          
          ### Cargo:
          ```
          cargo install orbiton
          ```
          
          ### Manual:
          Download the appropriate binary for your platform and add it to your PATH.
        draft: false
        prerelease: ${{ contains(steps.get_version.outputs.version, 'alpha') || contains(steps.get_version.outputs.version, 'beta') || contains(steps.get_version.outputs.version, 'rc') }}
  
  build-artifacts:
    name: Build Artifacts
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: orbiton-${{ needs.create-release.outputs.version }}-linux-x86_64.tar.gz
            asset_name: orbiton-linux-x86_64.tar.gz
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: orbiton-${{ needs.create-release.outputs.version }}-macos-x86_64.tar.gz
            asset_name: orbiton-macos-x86_64.tar.gz
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: orbiton-${{ needs.create-release.outputs.version }}-windows-x86_64.zip
            asset_name: orbiton-windows-x86_64.zip
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true
        target: ${{ matrix.target }}
    
    - name: Build
      uses: actions-rs/cargo@v1
      with:
        command: build
        args: --release --bin orbiton --bin orbit-analyzer
    
    - name: Prepare artifacts (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        mkdir -p artifacts/bin
        cp target/release/orbiton artifacts/bin/
        cp target/release/orbit-analyzer artifacts/bin/
        cp LICENSE-MIT artifacts/
        cp README.md artifacts/
        cd artifacts
        tar -czf ../${{ matrix.artifact_name }} .
    
    - name: Prepare artifacts (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        mkdir -p artifacts/bin
        cp target/release/orbiton.exe artifacts/bin/
        cp target/release/orbit-analyzer.exe artifacts/bin/
        cp LICENSE-MIT artifacts/
        cp README.md artifacts/
        cd artifacts
        7z a -tzip ../${{ matrix.artifact_name }} .
    
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./${{ matrix.artifact_name }}
        asset_name: ${{ matrix.asset_name }}
        asset_content_type: application/octet-stream
  
  publish-crates:
    name: Publish to Crates.io
    needs: [create-release, build-artifacts]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true
    
    - name: Publish orbit
      uses: actions-rs/cargo@v1
      with:
        command: publish
        args: --token ${{ secrets.CRATES_IO_TOKEN }} --allow-dirty -p orbit
      continue-on-error: true
    
    - name: Publish orbit-analyzer
      uses: actions-rs/cargo@v1
      with:
        command: publish
        args: --token ${{ secrets.CRATES_IO_TOKEN }} --allow-dirty -p orbit-analyzer
      continue-on-error: true
    
    - name: Publish orbitkit
      uses: actions-rs/cargo@v1
      with:
        command: publish
        args: --token ${{ secrets.CRATES_IO_TOKEN }} --allow-dirty -p orbitkit
      continue-on-error: true
    
    - name: Publish orbiton
      uses: actions-rs/cargo@v1
      with:
        command: publish
        args: --token ${{ secrets.CRATES_IO_TOKEN }} --allow-dirty -p orbiton
      continue-on-error: true
